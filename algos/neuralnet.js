var brain = require("brain"),
    fs = require("fs"),
    path = require("path");

var dir = "train";

var netJSON = trainNetwork();
console.log("network:", JSON.stringify(netJSON));

const NET = {"layers":[{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"8":{},"9":{},"11":{},"12":{},"16":{},"20":{},"24":{}},{"0":{"bias":0.3542529375149286,"weights":{"1":-0.018267499404976285,"2":-1.2081296994030601,"3":0.9602701077171218,"4":-0.07013696315451103,"5":-0.1262695014399003,"6":-0.02758912506779809,"8":-0.3114981019124353,"9":0.09140440559353624,"11":-0.0837279063530587,"12":-0.1337233891171562,"16":-0.018066588889702667,"20":0.1111143143854751,"24":0.013819755676462195}},"1":{"bias":0.35551933239174777,"weights":{"1":-0.3612010045309654,"2":1.2372676614502487,"3":0.7616990024012895,"4":-0.07347838053951011,"5":0.21939481016240533,"6":0.1363170170223594,"8":-0.4900085317819786,"9":-0.17139206244175806,"11":-0.11431084145577229,"12":-0.6341130698617206,"16":0.04778485042213534,"20":-0.02721264923690043,"24":-0.07882662377382753}},"2":{"bias":-1.6893337082404711,"weights":{"1":0.27752716294727336,"2":1.260082663235215,"3":-1.4611882145011406,"4":0.6081080480378112,"5":0.16707098445023652,"6":-0.1354321110299785,"8":0.45336446704397065,"9":0.0962860924184972,"11":-0.17819182529940153,"12":0.4728917369865625,"16":0.09536559471904997,"20":0.15358622086254384,"24":-0.0016262193224024482}},"3":{"bias":0.01654717926255435,"weights":{"1":-0.18600446860501046,"2":1.1831716671438186,"3":-0.9227959122659602,"4":-0.31274503283113303,"5":0.17096525793578493,"6":0.20083937003588076,"8":-0.23100428695827413,"9":0.02988030892159304,"11":-0.11263860063097578,"12":-0.1257958421362573,"16":0.14810327538690926,"20":0.16332373617428658,"24":-0.08147256196820225}},"4":{"bias":-1.3213914922872083,"weights":{"1":0.014536405770909736,"2":-1.1331861598813653,"3":1.1573694560617638,"4":0.6420028479203543,"5":-0.19535045139508622,"6":-0.20714901946740777,"8":0.23049398064554674,"9":0.037543533553716806,"11":-0.04264176430384594,"12":0.3930851195934552,"16":-0.09983012401233911,"20":0.16537828628421264,"24":0.10155199001985248}},"5":{"bias":1.183718280658512,"weights":{"1":0.18133615850731793,"2":-1.2666410385332911,"3":-1.444438969431054,"4":-0.3811752674888659,"5":-0.09268069222012396,"6":-0.03709027513140433,"8":0.6816508102143817,"9":-0.010633284763521128,"11":0.06973564171419933,"12":0.5694304484397102,"16":0.07789868152496825,"20":0.016876407495637336,"24":0.014003465646701746}}},{"2":{"bias":-0.6069220531960754,"weights":{"0":-2.270665723906174,"1":1.6284169678400386,"2":1.0926015187409555,"3":1.523452431329471,"4":-2.527543309681841,"5":-2.07474088096225}},"3":{"bias":-0.20156140142506426,"weights":{"0":1.4157012912518547,"1":0.15513718907592758,"2":-3.0202939288825714,"3":-1.8095295067311579,"4":1.4407718502498792,"5":-2.1386462841059743}},"4":{"bias":-1.327986791913506,"weights":{"0":-0.011800621495085222,"1":-3.6494601530140542,"2":1.6117792924605305,"3":-0.9019365399037997,"4":1.0572176311431056,"5":1.9681015643276816}},"null":{"bias":-0.06380680191516697,"weights":{"0":0.4894960871385499,"1":-0.4957320905021754,"2":-2.5688552133207585,"3":0.08175019962571238,"4":-1.9976774196367288,"5":2.166394148529621}}}],"outputLookup":true,"inputLookup":true};

module.exports = function(lines) {
  var spaces = getWidthCounts(lines);

  var net = new brain.NeuralNetwork().fromJSON(NET);
  var result = net.run(spaces);

  // remove outliers and get the minimum width
  var maxWidth = 0;
  for (var width in result) {
    prob = parseInt(width, 10);
    var count = spaces[width];
    if (width < minWidth)) {
      minWidth = width;
    }
  }

  console.log("result:", result);
}


function trainNetwork() {
  var allResults = {};

  var net = new brain.NeuralNetwork();
  var data = [];

  var counts = {};
  var files = fs.readdirSync(dir);

  for (var j in files) {
    var file = path.join(dir, files[j]);
    var indent = getIndent(file);
    if (indent != "tabs") {
      var contents = fs.readFileSync(file, { encoding: "utf-8"});
      var lines = contents.split("\n");

      var counts = getWidthCounts(lines);
      var output = {};
      output[indent] = 1;
      console.log("input", counts);
      console.log("output", output);
      data.push({input: counts, output: output});
    }
  }

  console.log("training network");

  var stats = net.train(data);

  console.log("trained", stats);

  return net.toJSON();
}

function getWidthCounts(lines) {
  var spaces = {};  // # spaces -> # lines with that many spaces

  // count up number of lines using each type of indentation
  lines.forEach(function (text) {
    var i = 0;
    while (text[i] === " ") {
      i++;
    }
    if (i == 0) {
      return;
    }
    spaces[i] = (spaces[i] || 0) + 1;
  });
  return spaces;
}

function getIndent(filename) {
  if (/-tabs\./.test(filename)) {
    return "tabs";
  }

  var matches = filename.match(/-(\d)\./);
  if (!matches) {
    return 0;
  }
  var spaces = parseInt(matches[1] || "0");
  return spaces || null;
}
